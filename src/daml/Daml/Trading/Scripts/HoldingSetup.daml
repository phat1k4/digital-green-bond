module Daml.Trading.Scripts.HoldingSetup where 

import DA.Map (empty, fromList)
import DA.Set (singleton)
import Daml.Script

import Daml.Finance.Interface.Account.Factory qualified as Account (F)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Instrument.Bond.FixedRate.Factory qualified as Instrument (F)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I)
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..))

import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Holding.NonFungible qualified as NonFungible (Factory(..))
import Daml.Finance.Instrument.Bond.FixedRate.Factory qualified as Instrument (Factory(..))
import Daml.Finance.Instrument.Token.Instrument qualified as Cash (Instrument(..))

import Daml.Trading.Account.Account (AccountFactoryReference(..), HoldingFactoryReference(..), InstrumentFactoryReference(..), nftLabel, greenBondLabel)
import Daml.Trading.Scripts.UserSetup qualified as UserSetup (getDefaultParties)
import Daml.Trading.Account.Account qualified as Account
import Daml.Trading.Account.CreateAccount qualified as CreateAccount
import Daml.Trading.Cash.CreditCashAccount qualified as CreditCashAccount

instrumentData = (Id "USD", "0")

initialize : Script HoldingSetupState
initialize = do 
  [public, admin] <- UserSetup.getDefaultParties 

  accountFactoryCid <- toInterfaceContractId @Account.F <$> submit admin do
    createCmd Account.Factory
      with
        provider = admin
        observers = empty
  submit admin do 
    createCmd AccountFactoryReference 
      with 
        provider = admin 
        accountFactoryCid

  cashHoldingFactoryCid <- toInterfaceContractId @Holding.F <$> submit admin do
    createCmd Fungible.Factory
      with
        provider = admin
        observers = fromList [("PublicObserver", singleton public )]
  submit admin do 
    createCmd HoldingFactoryReference 
      with 
        provider = admin 
        holdingType = "Fungible" 
        holdingFactoryCid = cashHoldingFactoryCid
  
  nftHoldingFactoryCid <- toInterfaceContractId @Holding.F <$> submit admin do 
    createCmd NonFungible.Factory 
      with 
        provider = admin 
        observers = fromList [("PublicObserver", singleton public )] 
  submit admin do 
    createCmd HoldingFactoryReference 
      with 
        provider = admin 
        holdingType = "NonFungible" 
        holdingFactoryCid = nftHoldingFactoryCid 

  greenBondHoldingFactoryCid <- toInterfaceContractId @Holding.F <$> submit admin do 
    createCmd NonFungible.Factory 
      with 
        provider = admin 
        observers = fromList [("PublicObserver", singleton public )] 
  submit admin do 
    createCmd HoldingFactoryReference 
      with 
        provider = admin 
        holdingType = "BondNonFungible" 
        holdingFactoryCid = greenBondHoldingFactoryCid 

  instrumentFactoryCid <- toInterfaceContractId @Instrument.F <$> submit admin do 
    createCmd Instrument.Factory 
      with 
        provider = admin 
        observers = fromList [("PublicObserver", singleton public )] 
  submit admin do 
    createCmd InstrumentFactoryReference 
      with 
        provider = admin 
        instrumentType = nftLabel 
        instrumentFactoryCid

  instrumentFactoryCid <- toInterfaceContractId @Instrument.F <$> submit admin do 
    createCmd Instrument.Factory 
      with 
        provider = admin 
        observers = fromList [("PublicObserver", singleton public )] 
  submit admin do 
    createCmd InstrumentFactoryReference 
      with 
        provider = admin 
        instrumentType = greenBondLabel 
        instrumentFactoryCid

  let (instrumentId, instrumentVersion) = instrumentData
  now <- getTime

  cashInstrumentCid <- toInterfaceContractId @Instrument.I <$> submit admin do
    createCmd Cash.Instrument
      with
        depository = admin
        issuer = admin
        id = instrumentId
        description = "Instrument representing units of USD"
        version = instrumentVersion
        observers = empty
        validAsOf = now

  let cashInstrument = InstrumentKey with issuer = admin; depository = admin; id = instrumentId; version = instrumentVersion

  adminRequestCid <- submit admin do 
    createCmd CreateAccount.AccountRequest 
      with 
        owner = admin 
        custodian = admin 
        accountType = Account.Admin 
        username = "admin" 
        realName = "Platform Admin" 
        passportNumber = "111111" 
        nationalId = "" 
        address  = "Unknown" 
  (adminAccountCid, _) <- submit admin $ exerciseCmd adminRequestCid CreateAccount.Request_Accept 
  adminAccountCid <- submit admin $ exerciseCmd adminAccountCid Account.Create_Cash_Account 
    with 
      description = "Admin Cash Account" 
      accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = [public] 
  adminAccountCid <- submit admin $ exerciseCmd adminAccountCid Account.Create_Nft_Account 
    with 
      description = "Admin Nft Account" 
      accountFactoryCid
      holdingFactoryCid = nftHoldingFactoryCid
      instrumentFactoryCid
      observers = [public] 

  adminAccountCid <- submit admin $ exerciseCmd adminAccountCid Account.Create_GreenBond_Account
    with 
      description = "Admin Green Bond Account" 
      accountFactoryCid
      holdingFactoryCid = greenBondHoldingFactoryCid
      instrumentFactoryCid
      observers = [public] 

  adminCreditCid <- submit admin do
    createCmd CreditCashAccount.AdminCreditRequest
      with
        owner = admin
        custodian = admin
        instrument = cashInstrument
        amount = 100000000.0
  adminHoldingCid <- submit admin $ exerciseCmd adminCreditCid CreditCashAccount.Accept

  pure (public, admin, cashInstrument, accountFactoryCid, cashHoldingFactoryCid, nftHoldingFactoryCid, greenBondHoldingFactoryCid, instrumentFactoryCid, adminHoldingCid)
type HoldingSetupState = (Party, Party, InstrumentKey, ContractId Account.F, ContractId Holding.F, ContractId Holding.F, ContractId Holding.F, ContractId Instrument.F, ContractId Holding.I)
